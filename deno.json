{
  "name": "@http/fns",
  "version": "0.7.0",
  "description": "HTTP server functions (including routing)",
  "tasks": {
    "example": "deno run -A --watch",
    "test": "deno test -A --location=http://localhost:8000 --no-check",
    "check": "deno fmt && deno lint && deno check **/*.ts && deno task exports",
    "exports": "deno run --allow-read=. --allow-write=deno.json scripts/exports.ts",
    "lock": "rm -f deno.lock && deno check **/*.ts"
  },
  "compilerOptions": {
    "noUncheckedIndexedAccess": true,
    "verbatimModuleSyntax": true
  },
  "imports": {
    "@http/fns": "jsr:@http/fns",
    "@std/assert": "jsr:@std/assert@^0.219.1",
    "@std/collections": "jsr:@std/collections@^0.219.1",
    "@std/http": "jsr:@std/http@^0.219.1",
    "@std/media-types": "jsr:@std/media-types@^0.219.1",
    "@std/net": "jsr:@std/net@^0.219.1",
    "@std/path": "jsr:@std/path@^0.219.1"
  },
  "exports": {
    "./as_serializable_pattern": "./lib/as_serializable_pattern.ts",
    "./as_url_pattern": "./lib/as_url_pattern.ts",
    "./by_media_type": "./lib/by_media_type.ts",
    "./by_method": "./lib/by_method.ts",
    "./by_pattern": "./lib/by_pattern.ts",
    "./by_sub_pattern": "./lib/by_sub_pattern.ts",
    "./cascade": "./lib/cascade.ts",
    "./discover_routes": "./lib/discover_routes.ts",
    "./dynamic_route": "./lib/dynamic_route.ts",
    "./fresh/path_mapper": "./lib/fresh/path_mapper.ts",
    "./generate_routes_module": "./lib/generate_routes_module.ts",
    "./handle": "./lib/handle.ts",
    "./hosting/init_deploy": "./lib/hosting/init_deploy.ts",
    "./hosting/init_localhost": "./lib/hosting/init_localhost.ts",
    "./intercept": "./lib/intercept.ts",
    "./interceptor/by_status": "./lib/interceptor/by_status.ts",
    "./interceptor/cors": "./lib/interceptor/cors.ts",
    "./interceptor/logger": "./lib/interceptor/logger.ts",
    "./interceptor/verify_header": "./lib/interceptor/verify_header.ts",
    "./interceptor/when_pattern": "./lib/interceptor/when_pattern.ts",
    "./lazy": "./lib/lazy.ts",
    "./load_key_and_cert": "./lib/load_key_and_cert.ts",
    "./map_data": "./lib/map_data.ts",
    "./port": "./lib/port.ts",
    "./request/body_as_object": "./lib/request/body_as_object.ts",
    "./request/required_header": "./lib/request/required_header.ts",
    "./request/search_values": "./lib/request/search_values.ts",
    "./request/url_header": "./lib/request/url_header.ts",
    "./response/accepted": "./lib/response/accepted.ts",
    "./response/append_headers": "./lib/response/append_headers.ts",
    "./response/bad_gateway": "./lib/response/bad_gateway.ts",
    "./response/bad_request": "./lib/response/bad_request.ts",
    "./response/conditional": "./lib/response/conditional.ts",
    "./response/forbidden": "./lib/response/forbidden.ts",
    "./response/html": "./lib/response/html.ts",
    "./response/json": "./lib/response/json.ts",
    "./response/method_not_allowed": "./lib/response/method_not_allowed.ts",
    "./response/no_content": "./lib/response/no_content.ts",
    "./response/not_acceptable": "./lib/response/not_acceptable.ts",
    "./response/not_found": "./lib/response/not_found.ts",
    "./response/not_modified": "./lib/response/not_modified.ts",
    "./response/ok": "./lib/response/ok.ts",
    "./response/permanent_redirect": "./lib/response/permanent_redirect.ts",
    "./response/plain_error": "./lib/response/plain_error.ts",
    "./response/prepend_doctype": "./lib/response/prepend_doctype.ts",
    "./response/redirect": "./lib/response/redirect.ts",
    "./response/replace_body": "./lib/response/replace_body.ts",
    "./response/see_other": "./lib/response/see_other.ts",
    "./response/temporary_redirect": "./lib/response/temporary_redirect.ts",
    "./response/unauthorized": "./lib/response/unauthorized.ts",
    "./server_url": "./lib/server_url.ts",
    "./static_route": "./lib/static_route.ts",
    "./types": "./lib/types.ts",
    "./with_fallback": "./lib/with_fallback.ts"
  }
}
