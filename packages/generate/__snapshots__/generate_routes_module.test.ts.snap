export const snapshot = {};

snapshot[`Generate with startup time discovery > generate module 1`] = `
'// IMPORTANT: This file has been automatically generated, DO NOT edit by hand.

import routeMapper_1 from "\$test/generate/ignored_route_mapper.ts";
import handlerMapper_1 from "\$test/generate/page_handler_mapper.ts";
import routeMapper_3 from "\$test/generate/txt_route_mapper.ts";
import { cascadingHandlerMapper } from "@http/discovery/cascading-handler-mapper";
import { combinedRouteMapper } from "@http/discovery/combined-route-mapper";
import handlerMapper_2 from "@http/discovery/default-handler-mapper";
import { dynamicRoute } from "@http/discovery/dynamic-route";
import handlerMapper_3 from "@http/discovery/methods-handler-mapper";
import routeMapper_2 from "@http/discovery/ts-route-mapper";

export default dynamicRoute({
  "fileRootUrl": import.meta.resolve("./routes"),
  "eagerness": "startup",
  "routeMapper": combinedRouteMapper(
    routeMapper_1,
    routeMapper_2,
    routeMapper_3,
  ),
  "handlerMapper": cascadingHandlerMapper(
    handlerMapper_1,
    handlerMapper_2,
    handlerMapper_3,
  ),
  "consolidate": true,
});
'
`;

snapshot[`Generate with request time discovery > generate module 1`] = `
'// IMPORTANT: This file has been automatically generated, DO NOT edit by hand.

import routeMapper_1 from "\$test/generate/ignored_route_mapper.ts";
import handlerMapper_1 from "\$test/generate/page_handler_mapper.ts";
import routeMapper_3 from "\$test/generate/txt_route_mapper.ts";
import { cascadingHandlerMapper } from "@http/discovery/cascading-handler-mapper";
import { combinedRouteMapper } from "@http/discovery/combined-route-mapper";
import handlerMapper_2 from "@http/discovery/default-handler-mapper";
import { dynamicRoute } from "@http/discovery/dynamic-route";
import handlerMapper_3 from "@http/discovery/methods-handler-mapper";
import routeMapper_2 from "@http/discovery/ts-route-mapper";

export default dynamicRoute({
  "fileRootUrl": import.meta.resolve("./routes"),
  "eagerness": "request",
  "routeMapper": combinedRouteMapper(
    routeMapper_1,
    routeMapper_2,
    routeMapper_3,
  ),
  "handlerMapper": cascadingHandlerMapper(
    handlerMapper_1,
    handlerMapper_2,
    handlerMapper_3,
  ),
  "consolidate": true,
});
'
`;

snapshot[`Generate flat router with static imports > generate module 1`] = `
'// IMPORTANT: This file has been automatically generated, DO NOT edit by hand.

import { pageHandler } from "\$test/generate/page_handler.ts";
import { byMethod } from "@http/route/by-method";
import { byPattern } from "@http/route/by-pattern";
import { cascade } from "@http/route/cascade";
import * as route_methods_2 from "./handle_txt.ts";
import * as route_methods_4 from "./routes/about.ts";
import route_5 from "./routes/index.ts";
import { body as page_body_3 } from "./routes/page.ts";
import * as route_methods_1 from "./routes/user/:name/index.ts";

export default cascade(
  byPattern("/user/:name{/}?", byMethod(route_methods_1)),
  byPattern("/raw", byMethod(route_methods_2)),
  byPattern(
    "/page",
    pageHandler(page_body_3, import.meta.resolve("./routes/page.ts")),
  ),
  byPattern("/about", byMethod(route_methods_4)),
  byPattern("/", route_5),
);
'
`;

snapshot[`Generate flat router with dynamic imports > generate module 1`] = `
'// IMPORTANT: This file has been automatically generated, DO NOT edit by hand.

import { pageHandler } from "\$test/generate/page_handler.ts";
import { byMethod } from "@http/route/by-method";
import { byPattern } from "@http/route/by-pattern";
import { cascade } from "@http/route/cascade";
import { lazy } from "@http/route/lazy";

export default cascade(
  byPattern(
    "/user/:name{/}?",
    lazy(async () => byMethod(await import("./routes/user/:name/index.ts"))),
  ),
  byPattern(
    "/raw",
    lazy(async () => byMethod(await import("./handle_txt.ts"))),
  ),
  byPattern(
    "/page",
    lazy(async () =>
      pageHandler(
        (await import("./routes/page.ts")).body,
        import.meta.resolve("./routes/page.ts"),
      )
    ),
  ),
  byPattern(
    "/about",
    lazy(async () => byMethod(await import("./routes/about.ts"))),
  ),
  byPattern("/", lazy(async () => (await import("./routes/index.ts")).default)),
);
'
`;

snapshot[`Generate tree router with static imports > generate module 1`] = `
'// IMPORTANT: This file has been automatically generated, DO NOT edit by hand.

import { pageHandler } from "\$test/generate/page_handler.ts";
import { byMethod } from "@http/route/by-method";
import { byPathTree } from "@http/route/by-path-tree";
import { byPattern } from "@http/route/by-pattern";
import { GUARD, LEAF, WILD } from "@http/route/path-tree/symbols";
import * as route_methods_2 from "./handle_txt.ts";
import * as route_methods_4 from "./routes/about.ts";
import route_5 from "./routes/index.ts";
import { body as page_body_3 } from "./routes/page.ts";
import * as route_methods_1 from "./routes/user/:name/index.ts";

export default byPathTree({
  "user": {
    [WILD]: {
      [GUARD]: [byPattern("/user/:name{/}?", byMethod(route_methods_1))],
    },
  },
  "raw": { [LEAF]: [byMethod(route_methods_2)] },
  "page": {
    [LEAF]: [pageHandler(page_body_3, import.meta.resolve("./routes/page.ts"))],
  },
  "about": { [LEAF]: [byMethod(route_methods_4)] },
  "": { [LEAF]: [route_5] },
});
'
`;

snapshot[`Generate tree router with dynamic imports > generate module 1`] = `
'// IMPORTANT: This file has been automatically generated, DO NOT edit by hand.

import { pageHandler } from "\$test/generate/page_handler.ts";
import { byMethod } from "@http/route/by-method";
import { byPathTree } from "@http/route/by-path-tree";
import { byPattern } from "@http/route/by-pattern";
import { lazy } from "@http/route/lazy";
import { GUARD, LEAF, WILD } from "@http/route/path-tree/symbols";

export default byPathTree({
  "user": {
    [WILD]: {
      [GUARD]: [byPattern(
        "/user/:name{/}?",
        lazy(async () =>
          byMethod(await import("./routes/user/:name/index.ts"))
        ),
      )],
    },
  },
  "raw": {
    [LEAF]: [lazy(async () => byMethod(await import("./handle_txt.ts")))],
  },
  "page": {
    [LEAF]: [lazy(async () =>
      pageHandler(
        (await import("./routes/page.ts")).body,
        import.meta.resolve("./routes/page.ts"),
      )
    )],
  },
  "about": {
    [LEAF]: [lazy(async () => byMethod(await import("./routes/about.ts")))],
  },
  "": {
    [LEAF]: [lazy(async () => (await import("./routes/index.ts")).default)],
  },
});
'
`;

snapshot[`Generate with default opts 1`] = `
'// IMPORTANT: This file has been automatically generated, DO NOT edit by hand.

import { byMethod } from "@http/route/by-method";
import { byPattern } from "@http/route/by-pattern";
import { cascade } from "@http/route/cascade";
import { lazy } from "@http/route/lazy";

export default cascade(byPattern("/user/:name{/}?", lazy(async () => byMethod(await import("./routes/user/:name/index.ts")))), byPattern("/about", lazy(async () => byMethod(await import("./routes/about.ts")))), byPattern("/", lazy(async () => (await import("./routes/index.ts")).default)));'
`;
